#!/bin/bash

export MAINFOLDER=`pwd`

ABI="armeabi-v7a"

# Possible ABIs:
# armeabi
# armeabi-v6 with VFP
# armeabi-v7a
# armeabi-v7a with NEON
# armeabi-v7a with VFPV3
# x86

API_LEVEL=9  # Default is 8

# See SDK/Android/android.toolchain.cmake for a full list of options.


export OPTIONS=("$MAINFOLDER" -G "Unix Makefiles"
    -DOGRE_BUILD_PLATFORM_ANDROID=1
    -DOGREKIT_UNITY_BUILD=1
    -DGAMEKIT_GRAPHIC_BACKEND=2
    -DOGRE_UNITY_BUILD=1
    -DOGREKIT_MINIMAL_FREEIMAGE_CODEC=1
    -DOGREKIT_BUILD_ANDROID=1
    -DLIBRARY_OUTPUT_PATH=
    -DCMAKE_TOOLCHAIN_FILE="$MAINFOLDER/SDK/Android/android.toolchain.cmake"
    -DANDROID_ABI="$ABI"
    -DANDROID_NATIVE_API_LEVEL=$API_LEVEL
)

if [ "" = "$1" ]; 
then
	echo "Use: $0 <build target directory> [ debug ]"
	exit 1
fi

if [ "" = "${ANDROID_NDK}" ]; 
then
	echo "ANDROID_NDK Path is empty."
	exit 1
fi

if [ ! -d $1 ]; 
then
	mkdir "$1"
fi

#
cd "$1" #>/dev/null 2>&1 && 

# It's necessary to run cmake twice in order to generate files needed for RTSS
if [ "debug" = "$2" ];
then
cmake "${OPTIONS[@]}" -DCMAKE_BUILD_TYPE="Debug" --debug-trycompile && \
cmake "${OPTIONS[@]}" -DCMAKE_BUILD_TYPE="Debug" --debug-trycompile
else
cmake "${OPTIONS[@]}" -DCMAKE_BUILD_TYPE="MinSizeRel" && \
cmake "${OPTIONS[@]}" -DCMAKE_BUILD_TYPE="MinSizeRel"
fi

# make
